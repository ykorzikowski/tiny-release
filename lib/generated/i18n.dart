import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_contract => "Add Contract";
  String get and => "und";
  String get birthday => "Birthday";
  String get brn_save => "Save";
  String get btn_add => "Add";
  String get btn_add_address => "Add Address";
  String get btn_add_mail => "Add Mail";
  String get btn_add_paragrpah => "Add Paragrpah";
  String get btn_add_phone => "Add Phone";
  String get btn_delete_all => "Delete all data";
  String get btn_dialog_cancel => "Abort";
  String get btn_edit => "Edit";
  String get btn_import_contacts => "Import from contracts";
  String get btn_save => "Speichern";
  String get camera => "Camera";
  String get cancel => "Cancel";
  String get choose_date => "Choose shooting date";
  String get choose_model => "Choose Model";
  String get choose_parent => "Choose Parent";
  String get choose_photographer => "Choose Photographer";
  String get choose_source => "Choose source";
  String get choose_witness => "Choose Witness";
  String get contract_will_made_between => "There will be a contract between";
  String get control => "Control";
  String get create_new_contract => "Create a new contract";
  String get dateFormatPattern => "yyyy-MM-dd";
  String get dateTimeFormatPattern => "yyyy-MM-dd hh:mm";
  String get gallery => "Gallery";
  String get hint_adresslabel => "adress_label";
  String get hint_birthday => "birthday";
  String get hint_city => "city";
  String get hint_company => "company";
  String get hint_content => "content";
  String get hint_country => "country";
  String get hint_description => "description";
  String get hint_familyname => "familyName";
  String get hint_givenname => "givenname";
  String get hint_id_number => "id number";
  String get hint_id_type => "id type";
  String get hint_language => "language";
  String get hint_location => "location";
  String get hint_mail => "mail";
  String get hint_mail_label => "mail label";
  String get hint_phone => "phone";
  String get hint_phone_label => "phone label";
  String get hint_postcode => "postcode";
  String get hint_region => "region";
  String get hint_street => "street";
  String get hint_subtitle => "subtitle";
  String get hint_title => "title";
  String get in_reception_areas => "in reception areas";
  String get item_layout => "Layouts";
  String get item_people => "People";
  String get item_preset => "Presets";
  String get item_reception => "Reception Areas";
  String get item_settings => "Settings";
  String get item_wording => "Wording";
  String get model_release => "Model Release";
  String get no_items_people => "Add people from your contacts";
  String get no_items_presets => "Create or import presets";
  String get no_items_reception => "Create new reception areas";
  String get preset => "Preset";
  String get represented_by => "represented_by";
  String get scaff_deleted => "dismissed";
  String get select_birthday => "Select Birthday";
  String get select_date_ok => "OK";
  String get shooting_date => "Shooting Date";
  String get shooting_subject => "Subject of Shooting";
  String get tile_contact_preview => "Contact Preview";
  String get title_add => "Add";
  String get title_add_people => "Add people";
  String get title_add_preset => "Add Preset";
  String get title_add_reception => "Add reception area";
  String get title_contracts => "Contracts";
  String get title_people => "People";
  String get title_preset => "Presets";
  String get title_reception => "Reception Area";
  String get title_settings => "Settings";
  String get title_wording => "Wording";
  String get witnessed_by => "Witnessed by";
}

class $de extends S {
  const $de();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "Abbrechen";
  @override
  String get dateFormatPattern => "dd.MM.yyyy";
  @override
  String get item_reception => "Aufnahmebereiche";
  @override
  String get btn_add_address => "Adresse hinzufügen";
  @override
  String get contract_will_made_between => "Es wird ein Vertrag geschlossen zwischen";
  @override
  String get hint_company => "Firma";
  @override
  String get hint_street => "Straße";
  @override
  String get no_items_people => "Fügen Sie Menschen aus Ihren Kontakten hinzu";
  @override
  String get shooting_date => "Aufnahmedatum";
  @override
  String get hint_title => "Titel";
  @override
  String get title_add => "Hinzufügen";
  @override
  String get witnessed_by => "Bezeugt durch";
  @override
  String get hint_phone_label => "Markierung";
  @override
  String get shooting_subject => "Betreff des Shootings";
  @override
  String get hint_content => "Inhalt";
  @override
  String get choose_date => "Wähle Aufnahmedatum";
  @override
  String get choose_witness => "Zeuge wählen";
  @override
  String get hint_mail_label => "Markierung";
  @override
  String get title_add_reception => "Aufnahmebereich hinzufügen";
  @override
  String get hint_mail => "E-Mail";
  @override
  String get title_add_people => "Menschen hinzufügen";
  @override
  String get hint_region => "Bundesland";
  @override
  String get gallery => "Gallerie";
  @override
  String get add_contract => "Vertrag hinzufügen";
  @override
  String get brn_save => "Speichern";
  @override
  String get btn_import_contacts => "Aus Kontakten importieren";
  @override
  String get choose_photographer => "Fotograf wählen";
  @override
  String get btn_edit => "Bearbeiten";
  @override
  String get select_birthday => "Geburtstag wählen";
  @override
  String get btn_save => "Speichern";
  @override
  String get btn_add_paragrpah => "Paragraf hinzufügen";
  @override
  String get choose_source => "Quelle wählen";
  @override
  String get title_settings => "Einstellungen";
  @override
  String get hint_location => "Location";
  @override
  String get select_date_ok => "Wählen";
  @override
  String get hint_id_type => "Ausweisart";
  @override
  String get btn_dialog_cancel => "Abbrechen";
  @override
  String get birthday => "Geburtstag";
  @override
  String get hint_phone => "Telefon";
  @override
  String get create_new_contract => "Erstellen Sie einen neuen Vertrag";
  @override
  String get no_items_reception => "Legen Sie einen neuen Aufnahmebereich an";
  @override
  String get hint_description => "Beschreibung";
  @override
  String get preset => "Vorschau";
  @override
  String get hint_familyname => "Nachname";
  @override
  String get hint_language => "Sprache";
  @override
  String get hint_adresslabel => "Markierung";
  @override
  String get title_people => "Menschen";
  @override
  String get hint_city => "Stad";
  @override
  String get choose_parent => "Gesetzl. Vertretung\n wählen";
  @override
  String get and => "und";
  @override
  String get no_items_presets => "Erstellen oder importieren Sie eine neue Vorlage";
  @override
  String get btn_add_phone => "Telefon hnzufügen";
  @override
  String get scaff_deleted => "gelöscht";
  @override
  String get camera => "Kamera";
  @override
  String get title_add_preset => "Vorlage hinzufügen";
  @override
  String get item_wording => "Wording";
  @override
  String get title_contracts => "Vertrtäge";
  @override
  String get hint_subtitle => "Untertitel";
  @override
  String get item_layout => "Layouts";
  @override
  String get control => "Verwaltung";
  @override
  String get item_settings => "Einstellungen";
  @override
  String get hint_postcode => "PLZ";
  @override
  String get hint_id_number => "Ausweisnummer";
  @override
  String get title_preset => "Vorlagen";
  @override
  String get title_reception => "Aufnahmebereiche";
  @override
  String get choose_model => "Model wählen";
  @override
  String get hint_country => "Land";
  @override
  String get dateTimeFormatPattern => "dd.MM.yyyy HH:mm";
  @override
  String get btn_add_mail => "E-Mail hinzufügen";
  @override
  String get btn_add => "Hinzufügen";
  @override
  String get item_preset => "Vorlagen";
  @override
  String get hint_birthday => "Geburtstag";
  @override
  String get in_reception_areas => "in den Aufnahmebereichen";
  @override
  String get tile_contact_preview => "Vertragsvorschau";
  @override
  String get btn_delete_all => "Lösche alle Daten";
  @override
  String get item_people => "Menschen";
  @override
  String get hint_givenname => "Vorname";
  @override
  String get title_wording => "Wording";
  @override
  String get model_release => "Model Release";
  @override
  String get represented_by => "Vertreten durch";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("de", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "de":
          return SynchronousFuture<S>(const $de());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
